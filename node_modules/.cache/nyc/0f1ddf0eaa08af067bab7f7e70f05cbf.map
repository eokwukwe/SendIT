{"version":3,"sources":["auth.js"],"names":["dotenv","config","Auth","req","res","next","token","headers","status","json","message","jwt","verify","process","env","JWT_SECRET","decoded","ADMIN_TYPE","usertype","user","USER_TYPE"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEAA,iBAAOC,MAAP;;AAEA;;IACqBC,I;;;;;;;;AACnB;;;;;;;;;;2GAS8BC,G,EAAKC,G,EAAKC,I;;;;;;AAChCC,qB,GAAQH,IAAII,OAAJ,CAAY,gBAAZ,C;;oBACTD,K;;;;;iDACIF,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,mCAAX,EAArB,C;;;;;uBAGeC,uBAAIC,MAAJ,CAAWN,KAAX,EAAkBO,QAAQC,GAAR,CAAYC,UAA9B,C;;;AAAhBC,uB;;sBACFH,QAAQC,GAAR,CAAYG,UAAZ,KAA2BD,QAAQE,Q;;;;;iDAC9Bd,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,2BAAS;AADiB,iBAArB,C;;;AAITP,oBAAIgB,IAAJ,GAAWH,OAAX;AACAX;;;;;;;iDAEOD,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,0BAAQ,YADkB;AAE1BE;AAF0B,iBAArB,C;;;;;;;;;;;;;;;;;AAOX;;;;;;;;;;;;;6GAS6BP,G,EAAKC,G,EAAKC,I;;;;;;AAC/BC,qB,GAAQH,IAAII,OAAJ,CAAY,gBAAZ,C;;oBACTD,K;;;;;kDACIF,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,mCAAX,EAArB,C;;;;;uBAGeC,uBAAIC,MAAJ,CAAWN,KAAX,EAAkBO,QAAQC,GAAR,CAAYC,UAA9B,C;;;AAAhBC,uB;;sBACFH,QAAQC,GAAR,CAAYM,SAAZ,KAA0BJ,QAAQE,Q;;;;;kDAC7Bd,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,2BAAS;AADiB,iBAArB,C;;;AAITP,oBAAIgB,IAAJ,GAAWH,OAAX;AACAX;;;;;;;kDAEOD,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,0BAAQ,YADkB;AAE1BE;AAF0B,iBAArB,C;;;;;;;;;;;;;;;;;;;;kBAxDQR,I","file":"auth.js","sourceRoot":"/home/okwukwe/Desktop/Andela/sendIT/server/middleware","sourcesContent":["import jwt from 'jsonwebtoken';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\n/** Users Authentication  */\nexport default class Auth {\n  /**\n   * Verify Admin token\n   * @static\n   * @param {object} req -The request object\n   * @param {object} res - The response object\n   * @param {function} next\n   * @returns\n   * @memberof Auth\n   */\n  static async verifyAdminToken(req, res, next) {\n    const token = req.headers['x-access-token'];\n    if (!token) {\n      return res.status(401).json({ message: 'Not authenticated, please sign in' });\n    }\n    try {\n      const decoded = await jwt.verify(token, process.env.JWT_SECRET);\n      if (process.env.ADMIN_TYPE !== decoded.usertype) {\n        return res.status(401).json({\n          message: 'access denied! you are not authorized to visit this page'\n        });\n      }\n      req.user = decoded;\n      next();\n    } catch (error) {\n      return res.status(401).json({\n        status: 'auth error',\n        message: error\n      });\n    }\n  }\n\n  /**\n   * Verify User Token\n   * @static\n   * @param {object} req - The request object\n   * @param {object} res - The response object\n   * @param {function} next\n   * @returns {object|void} response object\n   * @memberof Auth\n   */\n  static async verifyUserToken(req, res, next) {\n    const token = req.headers['x-access-token'];\n    if (!token) {\n      return res.status(401).json({ message: 'Not authenticated, please sign in' });\n    }\n    try {\n      const decoded = await jwt.verify(token, process.env.JWT_SECRET);\n      if (process.env.USER_TYPE !== decoded.usertype) {\n        return res.status(401).json({\n          message: 'access denied! you are not authorized to visit this page'\n        });\n      }\n      req.user = decoded;\n      next();\n    } catch (error) {\n      return res.status(401).json({\n        status: 'auth error',\n        message: error\n      });\n    }\n  }\n}\n"]}