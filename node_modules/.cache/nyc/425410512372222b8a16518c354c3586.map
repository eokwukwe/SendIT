{"version":3,"sources":["order.controller.js"],"names":["Order","req","res","errors","isEmpty","status","json","array","body","parcelDescription","parcelWeight","fromAddress","fromCity","fromCountry","toAddress","toCity","toCountry","receiver","receiverPhone","orderPrice","userId","parseInt","user","presentLocation","queryText","values","Date","db","query","rows","message","order","error","rowCount","length","total","parcelId","params","findText","updateText","result","to_address","to_city","to_country","findUser","trim","userid","userInfo","to","email","subject","firstname"],"mappings":"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","file":"order.controller.js","sourceRoot":"/home/okwukwe/Desktop/Andela/sendIT/server/controllers","sourcesContent":["import moment from 'moment';\nimport { validationResult } from 'express-validator/check';\nimport sendNotification from '../mailer/sendMail';\n\nimport db from '../model';\n\n/** Orders Controller Class */\nexport default class Order {\n  /**\n   * @desc POST api/v1/parcels\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} created order\n   * @memberof Order\n   */\n  static async createOrder(req, res) {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json(errors.array());\n    }\n\n    const {\n      parcelDescription,\n      parcelWeight,\n      fromAddress,\n      fromCity,\n      fromCountry,\n      toAddress,\n      toCity,\n      toCountry,\n      receiver,\n      receiverPhone\n    } = req.body;\n\n    const orderPrice = parcelWeight * 150;\n    const userId = parseInt(req.user.userId, 0);\n    const presentLocation = fromAddress;\n    const queryText = `INSERT INTO \n      orders(parcel_descrpt, parcel_wgt, price, from_address, from_city, from_country, to_address, to_city, to_country, receiver, receiver_phone, present_location, userid, created_on, updated_on) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) returning *`;\n\n    const values = [\n      parcelDescription,\n      parcelWeight,\n      orderPrice,\n      fromAddress,\n      fromCity,\n      fromCountry,\n      toAddress,\n      toCity,\n      toCountry,\n      receiver,\n      receiverPhone,\n      presentLocation,\n      userId,\n      moment(new Date()),\n      moment(new Date())\n    ];\n\n    try {\n      const { rows } = await db.query(queryText, values);\n      return res.status(201).json({\n        status: 'success',\n        message: 'parcel delivery order created successully',\n        order: rows[0]\n      });\n    } catch (error) {\n      return res.status(400).json({\n        status: 'error',\n        message: 'order not created',\n        error\n      });\n    }\n  }\n\n  /**\n   * @desc GET api/v1/parcels\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} all orders\n   * @memberof Order\n   */\n  static async getAllOrders(req, res) {\n    const queryText = 'SELECT * FROM orders';\n    try {\n      const { rows, rowCount } = await db.query(queryText);\n      if (rows.length === 0) {\n        return res.status(404).json({\n          status: 'failure',\n          message: 'orders not found'\n        });\n      }\n      return res.status(200).json({\n        status: 'success',\n        message: 'available orders',\n        rows,\n        total: rowCount\n      });\n    } catch (error) {\n      return res.status(400).json({\n        status: 'error',\n        message: 'could not get the orders'\n      });\n    }\n  }\n\n  /**\n   * @desc GET api/v1/parcels/:parcelId\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} one order\n   * @memberof Order\n   */\n  static async getOneOrder(req, res) {\n    const parcelId = parseInt(req.params.parcelId, 0);\n    const queryText = 'SELECT * FROM orders WHERE id=$1';\n    try {\n      const { rows } = await db.query(queryText, [parcelId]);\n      if (!rows[0]) {\n        return res.status(404).json({\n          status: 'failure',\n          message: 'order not found'\n        });\n      }\n      return res.status(200).json({\n        status: 'success',\n        message: 'user orders found',\n        order: rows[0]\n      });\n    } catch (error) {\n      return res.status(400).json({\n        status: 'error',\n        message: 'could not get user orders'\n      });\n    }\n  }\n\n  /**\n   * @desc GET api/v1/users/:userId/parcels\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} user orders\n   * @memberof Order\n   */\n  static async getOrdersbyUser(req, res) {\n    const userId = parseInt(req.params.userId, 0);\n    const queryText = 'SELECT * FROM orders WHERE userid=$1';\n    try {\n      const { rows, rowCount } = await db.query(queryText, [userId]);\n      if (rows.length === 0) {\n        return res.status(404).json({\n          status: 'failure',\n          error: 'user orders not found'\n        });\n      }\n      return res.status(200).json({\n        status: 'success',\n        message: 'user orders',\n        rows,\n        total: rowCount\n      });\n    } catch (error) {\n      return res.status(400).json({\n        status: 'error',\n        message: 'could not get the order'\n      });\n    }\n  }\n\n  /**\n   * @desc PUT api/v1/parcels/:parcelId/cancel\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} cancelled order\n   * @memberof Order\n   */\n  static async cancelOrder(req, res) {\n    const userId = parseInt(req.user.userId, 0);\n    const parcelId = parseInt(req.params.parcelId, 0);\n    const findText = 'SELECT * FROM orders WHERE id=$1 AND userid=$2';\n    const updateText = 'UPDATE orders SET cancelled=$1, updated_on=$2 WHERE id=$3 AND userid=$4 returning *';\n\n    try {\n      const { rows } = await db.query(findText, [parcelId, userId]);\n      if (!rows[0]) {\n        return res.status(404).json({\n          status: 'failure',\n          message: 'order not found'\n        });\n      }\n      const values = ['true', moment(new Date()), parcelId, userId];\n      const result = await db.query(updateText, values);\n      return res.status(200).json({\n        status: 'success',\n        message: 'order cancelled',\n        order: result.rows[0]\n      });\n    } catch (error) {\n      return res.status(400).json({\n        status: 'error',\n        message: 'could not cancell order'\n      });\n    }\n  }\n\n  /**\n   * @desc PUT api/v1/parcels/:parcelId/destination\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} changed destination order\n   * @memberof Order\n   */\n  static async changeOrderDestination(req, res) {\n    const { toAddress, toCity, toCountry } = req.body;\n    const userId = parseInt(req.user.userId, 0);\n    const parcelId = parseInt(req.params.parcelId, 0);\n    const findText = 'SELECT * FROM orders WHERE id=$1';\n    const updateText = 'UPDATE orders SET to_address=$1, to_city=$2, to_country=$3, updated_on=$4 WHERE id=$5 AND userid=$6 returning *';\n    try {\n      const { rows } = await db.query(findText, [parcelId]);\n      if (!rows[0]) {\n        return res.status(404).json({\n          status: 'failure',\n          message: 'order not found'\n        });\n      }\n      const values = [\n        toAddress || rows[0].to_address,\n        toCity || rows[0].to_city,\n        toCountry || rows[0].to_country,\n        moment(new Date()),\n        parcelId,\n        userId\n      ];\n      const result = await db.query(updateText, values);\n      return res.status(200).json({\n        status: 'success',\n        message: 'order destination changed',\n        order: result.rows[0]\n      });\n    } catch (error) {\n      return res.status(400).json({\n        status: 'error',\n        message: 'could not change order destination'\n      });\n    }\n  }\n\n  /**\n   * @desc PUT api/v1/parcels/:parcelId/status\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} changed status order\n   * @memberof Order\n   */\n  static async changeOrderStatus(req, res) {\n    const { status } = req.body;\n    const parcelId = parseInt(req.params.parcelId, 0);\n    const findUser = 'SELECT * FROM users WHERE id=$1';\n    const findText = 'SELECT * FROM orders WHERE id=$1';\n    const updateText = 'UPDATE orders SET status=$1, updated_on=$2 WHERE id=$3 returning *';\n\n    try {\n      const { rows } = await db.query(findText, [parcelId]);\n      if (!rows[0]) {\n        return res.status(404).json({\n          status: 'failure',\n          message: 'order not found'\n        });\n      }\n      const values = [status.trim() || rows[0].status, moment(new Date()), parcelId];\n      const result = await db.query(updateText, values);\n      const userInfo = await db.query(findUser, [rows[0].userid]);\n      const to = userInfo.rows[0].email;\n      const subject = 'Notification on parcel status';\n      const user = userInfo.rows[0].firstname;\n      const message = `\n        <h3 style=\"text-transform:capitalize\">Hello ${user},</h3><p>Your parcel is ${status}</p>`;\n\n      sendNotification(to, subject, message, user, res);\n      return res.status(200).json({\n        status: 'success',\n        message: 'order status changed',\n        order: result.rows[0]\n      });\n    } catch (error) {\n      return res.status(400).json({\n        status: 'error',\n        message: 'could not change order status'\n      });\n    }\n  }\n\n  /**\n   * @desc PUT api/v1/parcels/:parcelId/presentLocation\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} changed present location order\n   * @memberof Order\n   */\n  static async changeOrderPresentLocation(req, res) {\n    const { fromAddress, fromCity, fromCountry } = req.body;\n    const parcelId = parseInt(req.params.parcelId, 0);\n    const findUser = 'SELECT * FROM users WHERE id=$1';\n    const findText = 'SELECT * FROM orders WHERE id=$1';\n    const updateText = 'UPDATE orders SET present_location=$1, updated_on=$2 WHERE id=$3 returning *';\n\n    try {\n      const { rows } = await db.query(findText, [parcelId]);\n      if (!rows[0]) {\n        return res.status(404).json({\n          status: 'failure',\n          message: 'order not found'\n        });\n      }\n      const presentLocation = `${fromAddress} ${fromCity}, ${fromCountry}`;\n      const values = [presentLocation, moment(new Date()), parcelId];\n      const result = await db.query(updateText, values);\n      const userInfo = await db.query(findUser, [rows[0].userid]);\n\n      const to = userInfo.rows[0].email;\n      const subject = 'Notification on parcel location';\n      const user = userInfo.rows[0].firstname;\n      const message = `\n      <h3 style=\"text-transform:capitalize\">Hello ${user},</h3>\n      <p>Your parcel is currently at ${presentLocation}</p>`;\n\n      sendNotification(to, subject, message);\n\n      return res.status(200).json({\n        status: 'success',\n        message: 'order present location changed',\n        order: result.rows[0]\n      });\n    } catch (error) {\n      return res.status(400).json({\n        status: 'error',\n        error,\n        message: 'could not change order present location'\n      });\n    }\n  }\n}\n"]}