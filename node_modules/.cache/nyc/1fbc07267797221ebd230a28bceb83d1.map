{"version":3,"sources":["UserController.js"],"names":["UserController","req","res","errors","isEmpty","status","json","array","body","fname","lname","eml","password","hassPassword","Helper","hashPassword","queryText","values","Date","db","query","rows","id","firstname","lastname","email","usertype","payload","userId","token","generateToken","message","details","routine","error","err","comparePassword"],"mappings":"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","file":"UserController.js","sourceRoot":"/home/okwukwe/Desktop/Andela/sendIT/server/controllers","sourcesContent":["import moment from 'moment';\nimport { validationResult } from 'express-validator/check';\n\nimport db from '../model';\nimport Helper from '../helper/helper';\n\n/** Users Controller Class */\nexport default class UserController {\n  /**\n   * @static\n   * @desc POST /api/v1/auth/signup\n   * @param {object} req\n   * @param {object} res\n   * @returns user token\n   * @memberof UserController\n   */\n  static async create(req, res) {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json(errors.array());\n    }\n\n    const {\n      fname, lname, eml, password\n    } = req.body;\n    const hassPassword = Helper.hashPassword(password);\n    const queryText = 'INSERT INTO users(firstname, lastname, email, password, created_on, updated_on) VALUES ($1, $2, $3, $4, $5, $6) returning *';\n\n    const values = [fname, lname, eml, hassPassword, moment(new Date()), moment(new Date())];\n\n    try {\n      const { rows } = await db.query(queryText, values);\n      const {\n        id, firstname, lastname, email, usertype\n      } = rows[0];\n      const payload = { userId: id, usertype, email };\n      const token = Helper.generateToken(payload);\n\n      return res.status(201).json({\n        status: 'signup success',\n        message: 'you have successfully signed up',\n        token,\n        details: {\n          firstname,\n          lastname\n        }\n      });\n    } catch (err) {\n      if (err.routine === '_bt_check_unique') {\n        return res.status(400).json({\n          status: 'signup failure',\n          message: 'user with that email already exists'\n        });\n      }\n      return res.status(400).json({\n        status: 'error',\n        error: 'signup unsuccessful',\n        err\n      });\n    }\n  }\n\n  /**\n   * @static\n   * @desc POST /api/v1/auth/login\n   * @param {object} req\n   * @param {object} res\n   * @returns user token\n   * @memberof UserController\n   */\n  static async login(req, res) {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json(errors.array());\n    }\n\n    const { eml, password } = req.body;\n    const queryText = 'SELECT * FROM users WHERE email = $1';\n\n    try {\n      const { rows } = await db.query(queryText, [eml]);\n      if (!rows[0]) {\n        return res.status(400).json({\n          status: 'login failure',\n          message: 'user does not exist'\n        });\n      }\n      if (!Helper.comparePassword(rows[0].password, password)) {\n        return res.status(400).json({\n          status: 'login failure',\n          message: 'incorrect password'\n        });\n      }\n\n      const payload = { userId: rows[0].id, usertype: rows[0].usertype, email: rows[0].email };\n      const token = Helper.generateToken(payload);\n      return res.status(200).json({\n        status: 'login success',\n        message: 'you have successfully log in',\n        token\n      });\n    } catch (err) {\n      return res.status(400).json({\n        status: 'error',\n        err\n      });\n    }\n  }\n}\n"]}